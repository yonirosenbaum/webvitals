{"version":3,"file":"static/js/953.5791d6cf.chunk.js","mappings":"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","sources":["components/button/Button.tsx","components/button/ButtonLoader.tsx","components/inputs/ControlledCheckbox.tsx","components/inputs/ControlledTextField.tsx","utils/validation.ts","modules/form/index.tsx"],"sourcesContent":["import MuiButton, { ButtonProps } from '@mui/material/Button'\n\nexport type { ButtonProps } from '@mui/material/Button'\n\nexport const Button = <C extends React.ElementType>({\n  children,\n  to,\n  variant = 'contained',\n  color = 'primary',\n  ...props\n}: ButtonProps<C, { component?: C }>): JSX.Element => (\n  <MuiButton\n    {...props}\n    variant={variant}\n    color={color}\n    role={to && 'link'}\n    to={to}\n    disableElevation\n    disableRipple\n  >\n    {children}\n  </MuiButton>\n)\n\nexport default Button\n","import CircularProgress from '@mui/material/CircularProgress'\nimport React from 'react'\n\nimport Button, { ButtonProps } from 'src/components/button/Button'\n\nexport interface ButtonLoaderProps extends ButtonProps {\n  loading: boolean\n}\n\nconst ButtonLoader = <C extends React.ElementType>({\n  size,\n  loading,\n  children,\n  ...props\n}: ButtonProps<C, { component?: C }>) => (\n  <Button {...props} size={size} disabled={loading}>\n    {loading ? (\n      <CircularProgress size={size === 'large' ? 20 : 15} color=\"inherit\" />\n    ) : (\n      children\n    )}\n  </Button>\n)\n\nexport default React.memo(ButtonLoader)\n","import Checkbox, { CheckboxProps } from '@mui/material/Checkbox'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport React from 'react'\nimport { Control, Controller, FieldPath, FieldValues } from 'react-hook-form'\n\nexport interface ControlledCheckboxProps {\n  name: FieldPath<FieldValues>\n  label: string\n  control: Control<FieldValues>\n  defaultValue?: boolean\n  checkboxOptions?: CheckboxProps\n}\n\nconst ControlledCheckbox: React.FC<ControlledCheckboxProps> = ({\n  name,\n  label,\n  control,\n  checkboxOptions,\n  defaultValue = false,\n}) => (\n  <Controller\n    name={name}\n    control={control}\n    defaultValue={defaultValue}\n    render={({ field }) => (\n      <FormControlLabel\n        label={label}\n        control={\n          <Checkbox\n            {...field}\n            {...checkboxOptions}\n            onChange={e => field.onChange(e.target.checked)}\n          />\n        }\n      />\n    )}\n  />\n)\n\nexport default React.memo(ControlledCheckbox)\n","import TextField, {\n  TextFieldProps as MuiTextFieldProps,\n} from '@mui/material/TextField'\nimport React from 'react'\nimport {\n  Control,\n  Controller,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n} from 'react-hook-form'\nimport styled, { css } from 'styled-components'\n\ninterface RequiredProps {\n  name: FieldPath<FieldValues>\n  control: Control<FieldValues>\n  errors: FieldErrors\n  defaultValue?: string\n}\n\nexport type ControlledTextFieldProps = MuiTextFieldProps & RequiredProps\n\ninterface ErrorProps {\n  $active: boolean\n}\n\nconst StyledContainer = styled.div`\n  position: relative;\n`\n\nconst ErrorMessage = styled.span<ErrorProps>(\n  ({ theme, $active }) => css`\n    position: absolute;\n    left: 0;\n    bottom: ${$active ? -20 : -5}px;\n    font-size: ${theme.typography.pxToRem(12)};\n    color: ${theme.palette.error.main};\n    opacity: ${$active ? 1 : 0};\n    transition: all 0.3s ease-out;\n  `\n)\n\nconst ControlledTextField: React.FC<ControlledTextFieldProps> = ({\n  name,\n  errors,\n  control,\n  className,\n  defaultValue = '',\n  ...props\n}) => {\n  return (\n    <Controller\n      name={name}\n      control={control}\n      defaultValue={defaultValue}\n      render={({ field, fieldState }) => (\n        <StyledContainer className={className}>\n          <TextField\n            error={!!fieldState.error}\n            variant=\"outlined\"\n            InputLabelProps={{ shrink: true }}\n            {...field}\n            {...props}\n          />\n          <ErrorMessage $active={!!fieldState.error}>\n            {fieldState.error?.message}\n          </ErrorMessage>\n        </StyledContainer>\n      )}\n    />\n  )\n}\n\nexport default React.memo(ControlledTextField)\n","import * as Yup from 'yup'\n\nexport const loginValidation = Yup.object().shape({\n  email: Yup.string()\n    .required('Please enter your email')\n    .email('Please enter a valid email'),\n  password: Yup.string()\n    .required('Please enter your password')\n    .min(8, 'Password must have at least 8 characters'),\n})\n","import { yupResolver } from '@hookform/resolvers/yup'\nimport Grid from '@mui/material/Grid'\nimport { useForm, FieldValues } from 'react-hook-form'\nimport styled from 'styled-components'\n\nimport LoaderButton from 'src/components/button/ButtonLoader'\nimport FormCheckbox from 'src/components/inputs/ControlledCheckbox'\nimport FormTextField from 'src/components/inputs/ControlledTextField'\nimport { loginValidation } from 'src/utils/validation'\n\nconst StyledForm = styled.form`\n  margin: auto;\n  max-width: 400px;\n  border-radius: 4px;\n  padding: ${({ theme }) => theme.spacing(2)};\n  box-shadow: 0px 5px 18px -2px rgba(0, 0, 0, 0.2);\n`\n\nconst GridCheckbox = styled(Grid)`\n  display: flex;\n  justify-content: center;\n`\n\nconst StyledLoaderButton = styled(LoaderButton)`\n  margin: ${({ theme }) => theme.spacing(2, 0, 0, 0)};\n`\n\nconst CatalogueForm: React.FC = () => {\n  const {\n    reset,\n    control,\n    handleSubmit,\n    formState: { isSubmitting, errors },\n  } = useForm<FieldValues>({\n    mode: 'onBlur',\n    resolver: yupResolver(loginValidation),\n    // Note: When loading defaultValues asynchronously please refer to: https://github.com/react-hook-form/react-hook-form/issues/1150\n    defaultValues: { email: '', password: '', rememberMe: false },\n  })\n\n  const onSubmit = handleSubmit(values => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        console.log(values)\n        reset()\n\n        resolve(true)\n      }, 1000)\n    })\n  })\n\n  return (\n    <StyledForm onSubmit={onSubmit}>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <FormTextField\n            fullWidth\n            name=\"email\"\n            type=\"email\"\n            label=\"Email\"\n            errors={errors}\n            control={control}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FormTextField\n            fullWidth\n            type=\"password\"\n            name=\"password\"\n            label=\"Password\"\n            errors={errors}\n            control={control}\n          />\n        </Grid>\n        <GridCheckbox item xs={12}>\n          <FormCheckbox\n            name=\"rememberMe\"\n            label=\"Remember Me\"\n            control={control}\n            checkboxOptions={{ color: 'primary' }}\n          />\n        </GridCheckbox>\n      </Grid>\n      <Grid item xs={12}>\n        <StyledLoaderButton\n          fullWidth\n          type=\"submit\"\n          color=\"primary\"\n          variant=\"contained\"\n          loading={isSubmitting}\n        >\n          Login\n        </StyledLoaderButton>\n      </Grid>\n    </StyledForm>\n  )\n}\n\nexport default CatalogueForm\n"],"names":["children","to","variant","color","props","role","disableElevation","disableRipple","ButtonLoader","size","loading","disabled","CircularProgress","React","ControlledCheckbox","name","label","control","checkboxOptions","defaultValue","render","field","FormControlLabel","Checkbox","onChange","e","target","checked","StyledContainer","styled","ErrorMessage","theme","$active","css","typography","pxToRem","palette","error","main","ControlledTextField","errors","className","fieldState","TextField","InputLabelProps","shrink","message","loginValidation","Yup","shape","email","required","password","min","StyledForm","spacing","GridCheckbox","Grid","StyledLoaderButton","LoaderButton","useForm","mode","resolver","yupResolver","defaultValues","rememberMe","reset","handleSubmit","formState","isSubmitting","onSubmit","values","Promise","resolve","setTimeout","console","log","container","item","xs","fullWidth","type"],"sourceRoot":""}